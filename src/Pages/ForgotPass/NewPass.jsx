import { useState } from "react";
import { useForm } from "react-hook-form";
import Swal from "sweetalert2";
import ResetPassword from "../../Models/ResetPassword/ResetPassword";
import { useNavigate } from "react-router-dom";

const NewPass = () => {
  const navigate = useNavigate();

  const [showPassword, setShowPassword] = useState(false);
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm();

  const handlePasswordReset = async (data) => {
    if (data.newPass !== data.retypePass) {
      Swal.fire({
        title: "рждрзНрж░рзБржЯрж┐!",
        text: "ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржПржмржВ ржкрзБржирж░рж╛ржпрж╝ ржжрзЗржУрзЯрж╛ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржорж┐рж▓ржЫрзЗ ржирж╛ред",
        icon: "error",
        confirmButtonText: "ржарж┐ржХ ржЖржЫрзЗ",
      });
      return;
    }

    try {
      const response = await ResetPassword({
        email: data.email,
        verification_code: data.code,
        password: data.newPass,
        password_confirmation: data.retypePass,
      });
      console.log(response);

      reset();

      if (response.error === true) {
        Swal.fire({
          title: "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!",
          text: "ржЖржкржирж╛рж░ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи рж╣ржпрж╝рзЗржЫрзЗред",
          icon: "success",
          confirmButtonText: "ржарж┐ржХ ржЖржЫрзЗ",
        }).then(() => {
          navigate("/");
        });
      } else {
        Swal.fire({
          title: "рждрзНрж░рзБржЯрж┐!",
          text:
            response?.error ||
            "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
          icon: "error",
          confirmButtonText: "ржарж┐ржХ ржЖржЫрзЗ",
        });
      }
    } catch (error) {
      Swal.fire({
        title: "рждрзНрж░рзБржЯрж┐!",
        text:
          error.response?.data?.error ||
          "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        icon: "error",
        confirmButtonText: "ржарж┐ржХ ржЖржЫрзЗ",
      });
    }
  };

  return (
    <div className="flex items-center justify-center ">
      <div className="w-full rounded-2xl">
        <div className="p-8 pt-2 space-y-6">
          <form
            onSubmit={handleSubmit(handlePasswordReset)}
            className="space-y-5"
          >
            {/* Email Field */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ржЗржорзЗржЗрж▓
              </label>
              <div className="relative">
                <input
                  type="email"
                  placeholder="ржЖржкржирж╛рж░ ржЗржорзЗржЗрж▓ рж▓рж┐ржЦрзБржи"
                  {...register("email", { required: "ржЗржорзЗржЗрж▓ ржкрзНрж░ржпрж╝рзЛржЬржи" })}
                  className={`w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition ${
                    errors.email
                      ? "border-red-500 focus:ring-red-200"
                      : "border-gray-300"
                  }`}
                />
                <div className="absolute inset-y-0 right-3 flex items-center">
                  <span className="text-gray-400">тЬЙя╕П</span>
                </div>
              </div>
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.email.message}
                </p>
              )}
            </div>

            {/* Verification Code Field */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржХрзЛржб
              </label>
              <div className="relative">
                <input
                  type="text"
                  placeholder="ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржХрзЛржб рж▓рж┐ржЦрзБржи"
                  {...register("code", { required: "ржХрзЛржб ржкрзНрж░ржпрж╝рзЛржЬржи" })}
                  className={`w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition ${
                    errors.code
                      ? "border-red-500 focus:ring-red-200"
                      : "border-gray-300"
                  }`}
                />
                <div className="absolute inset-y-0 right-3 flex items-center">
                  <span className="text-gray-400">ЁЯФв</span>
                </div>
              </div>
              {errors.code && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.code.message}
                </p>
              )}
            </div>

            {/* New Password Field */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб
              </label>
              <div className="relative">
                <input
                  type={showPassword ? "text" : "password"}
                  placeholder="ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж▓рж┐ржЦрзБржи"
                  {...register("newPass", {
                    required: "ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзНрж░ржпрж╝рзЛржЬржи",
                    minLength: {
                      value: 6,
                      message: "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржХржоржкржХрзНрж╖рзЗ рзмржЯрж┐ ржЕржХрзНрж╖рж░рзЗрж░ рж╣ржУржпрж╝рж╛ ржЙржЪрж┐ржд",
                    },
                  })}
                  className={`w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition ${
                    errors.newPass
                      ? "border-red-500 focus:ring-red-200"
                      : "border-gray-300"
                  }`}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-3 flex items-center text-gray-500 hover:text-gray-700"
                  title={showPassword ? "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж▓рзБржХрж╛ржи" : "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржжрзЗржЦрзБржи"}
                >
                  {showPassword ? (
                    <span className="text-lg">ЁЯСБя╕П</span>
                  ) : (
                    <span className="text-lg">ЁЯСБя╕ПтАНЁЯЧия╕П</span>
                  )}
                </button>
              </div>
              {errors.newPass && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.newPass.message}
                </p>
              )}
            </div>

            {/* Confirm Password Field */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзБржирж░рж╛ржпрж╝ рж▓рж┐ржЦрзБржи
              </label>
              <div className="relative">
                <input
                  type={showPassword ? "text" : "password"}
                  placeholder="ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзБржирж░рж╛ржпрж╝ рж▓рж┐ржЦрзБржи"
                  {...register("retypePass", {
                    required: "ржкрзБржирж░рж╛ржпрж╝ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзНрж░ржпрж╝рзЛржЬржи",
                  })}
                  className={`w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition ${
                    errors.retypePass
                      ? "border-red-500 focus:ring-red-200"
                      : "border-gray-300"
                  }`}
                />
                <div className="absolute inset-y-0 right-3 flex items-center">
                  <span className="text-gray-400">ЁЯФТ</span>
                </div>
              </div>
              {errors.retypePass && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.retypePass.message}
                </p>
              )}
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              className="w-full py-3 px-4 bg-gradient-to-r from-teal-600 to-teal-500 hover:from-teal-700 hover:to-teal-600 text-white font-medium rounded-lg transition-all focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 shadow-md"
            >
              ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи
            </button>
          </form>

          <div className="text-center pt-4 border-t border-gray-100">
            <p className="text-gray-600 text-sm">
              ржоржирзЗ ржкржбрж╝рзЗ ржЧрзЗржЫрзЗ?{" "}
              <a
                href="/login"
                className="text-teal-600 hover:text-teal-800 font-medium"
              >
                рж▓ржЧржЗржи ржХрж░рзБржи
              </a>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NewPass;
